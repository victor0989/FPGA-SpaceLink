## Proyecto sinegen/RTL analysis & debugging

============================================================
Proyecto: Sinegen para ZCU106 UltraScale
============================================================

Este archivo sintetiza los pasos necesarios para:
  - Crear un proyecto RTL en Vivado para la placa ZCU106.
  - Incluir los archivos Verilog (sinegen y sinegen_demo).
  - Configurar el archivo de constraints (XDC) para la placa.
  - Sintetizar y programar la FPGA.

------------------------------------------------------------
1. Creación del Proyecto en Vivado
------------------------------------------------------------
a) Abrir Vivado IDE.
b) Seleccionar "Create Project" y configurar lo siguiente:
   - Project Name: "sinegen_proj"
   - Project Type: RTL Project (sin simulación, si no se requiere)
   - Agregar los siguientes archivos fuente:
       • sinegen.v
       • sinegen_demo.v
   - Agregar el archivo de constraints: "ZCU106.xdc"
   - Seleccionar la placa ZCU106 UltraScale (o definir manualmente la parte)
c) Finalizar el asistente y abrir el proyecto.

------------------------------------------------------------
2. Código Verilog: sinegen.v
------------------------------------------------------------
Este módulo genera una onda sinusoidal utilizando un acumulador de fase y una tabla de búsqueda (LUT).

`timescale 1ns / 1ps
module sinegen(
    input             clk,    // Reloj del sistema
    input             reset,  // Reset asíncrono
    input      [1:0]  sel,    // Selector de frecuencia
    output reg signed [19:0] sine  // Salida de la onda sinusoidal (20 bits, con signo)
);

    // Acumulador de fase (16 bits)
    reg [15:0] phase;
    // Incremento de fase (determina la frecuencia de salida)
    reg [15:0] phase_inc;

    // Selección del incremento de fase según la señal 'sel'
    always @(*) begin
        case(sel)
            2'b00: phase_inc = 16'd100;  // Frecuencia baja
            2'b01: phase_inc = 16'd200;
            2'b10: phase_inc = 16'd400;
            2'b11: phase_inc = 16'd800;  // Frecuencia alta
            default: phase_inc = 16'd100;
        endcase
    end

    // Actualización del acumulador de fase
    always @(posedge clk or posedge reset) begin
        if (reset)
            phase <= 16'd0;
        else
            phase <= phase + phase_inc;
    end

    // Generación de la onda sinusoidal mediante una LUT
    // Se usan los 4 bits MSB del acumulador para indexar la LUT (16 muestras por ciclo)
    always @(*) begin
        case(phase[15:12])
            4'd0:  sine = 20'sd0;
            4'd1:  sine = 20'sd200000;
            4'd2:  sine = 20'sd370000;
            4'd3:  sine = 20'sd484000;
            4'd4:  sine = 20'sd524287;  // Valor máximo (aprox. 2^19 - 1)
            4'd5:  sine = 20'sd484000;
            4'd6:  sine = 20'sd370000;
            4'd7:  sine = 20'sd200000;
            4'd8:  sine = 20'sd0;
            4'd9:  sine = -20'sd200000;
            4'd10: sine = -20'sd370000;
            4'd11: sine = -20'sd484000;
            4'd12: sine = -20'sd524287;
            4'd13: sine = -20'sd484000;
            4'd14: sine = -20'sd370000;
            4'd15: sine = -20'sd200000;
            default: sine = 20'sd0;
        endcase
    end

endmodule

------------------------------------------------------------
3. Código Verilog: sinegen_demo.v
------------------------------------------------------------
Este módulo top instancia el generador de senos y un bloque ILA para depuración.  
*(Nota: La IP del ILA debe estar configurada en Vivado y generar el módulo "ila_0".)*

`timescale 1ns / 1ps
// Atributos para que las herramientas marquen las señales para depuración
(* mark_debug = "true" *) wire GPIO_BUTTONS_db;
(* mark_debug = "true" *) wire GPIO_BUTTONS_dly;
(* mark_debug = "true" *) wire GPIO_BUTTONS_re;

module sinegen_demo(
    input             clk,         // Reloj del sistema
    input             reset,       // Reset
    input      [1:0]  sineSel,     // Selector de frecuencia para sinegen
    input      [3:0]  GPIO_BUTTONS,// Botones para depuración
    output signed [19:0] sine     // Salida de la onda sinusoidal
);

    // Instanciación del generador de senos
    sinegen u_sinegen (
        .clk(clk),
        .reset(reset),
        .sel(sineSel),
        .sine(sine)
    );

    // Instanciación del ILA para depuración (asegúrate de configurar la IP ILA en Vivado)
    ila_0 u_ila (
        .CLK    (clk),
        .PROBE0 (sineSel),
        .PROBE1 (sine),
        .PROBE2 (GPIO_BUTTONS_db),
        .PROBE3 (GPIO_BUTTONS_re),
        .PROBE4 (GPIO_BUTTONS_dly),
        .PROBE5 (GPIO_BUTTONS)
    );

endmodule

------------------------------------------------------------
4. Archivo de Constraints para ZCU106: ZCU106.xdc
------------------------------------------------------------
Ejemplo básico (ajusta los pines según tu placa y requerimientos):

## Configuración del reloj de sistema
set_property -dict { PACKAGE_PIN <PIN_CLK> IOSTANDARD LVCMOS33 } [get_ports { clk }];
create_clock -name sysclk -period 10 -waveform {0 5} [get_ports { clk }];

## Asignación de pines para el selector de frecuencia (sineSel)
set_property -dict { PACKAGE_PIN <PIN_S0> IOSTANDARD LVCMOS33 } [get_ports { sineSel[0] }];
set_property -dict { PACKAGE_PIN <PIN_S1> IOSTANDARD LVCMOS33 } [get_ports { sineSel[1] }];

## Asignación de pines para los botones de depuración (GPIO_BUTTONS)
set_property -dict { PACKAGE_PIN <PIN_BTN0> IOSTANDARD LVCMOS33 } [get_ports { GPIO_BUTTONS[0] }];
set_property -dict { PACKAGE_PIN <PIN_BTN1> IOSTANDARD LVCMOS33 } [get_ports { GPIO_BUTTONS[1] }];
set_property -dict { PACKAGE_PIN <PIN_BTN2> IOSTANDARD LVCMOS33 } [get_ports { GPIO_BUTTONS[2] }];
set_property -dict { PACKAGE_PIN <PIN_BTN3> IOSTANDARD LVCMOS33 } [get_ports { GPIO_BUTTONS[3] }];

## (Agrega aquí los pines para otros periféricos según sea necesario)
------------------------------------------------------------
5. Síntesis, Implementación y Programación
------------------------------------------------------------
a) Con el proyecto abierto en Vivado:
   - Ejecuta **Run Synthesis**.
   - Una vez completada la síntesis, ejecuta **Run Implementation**.
   - Genera el bitstream (Generate Bitstream).
   - Programa la FPGA conectando la placa ZCU106 y utilizando el hardware manager.

------------------------------------------------------------
6. Consideraciones Finales
------------------------------------------------------------
- Verifica que los pines asignados en el archivo XDC coincidan con la documentación de la placa ZCU106.
- Ajusta los valores del incremento de fase (phase_inc) en el módulo **sinegen** para obtener la frecuencia deseada.
- La IP del ILA debe configurarse y personalizarse en Vivado para que las señales marcadas sean visibles.
- Puedes modificar o ampliar este ejemplo según las necesidades de tu proyecto.

============================================================
Fin del archivo sintético para el proyecto Sinegen en ZCU106
============================================================
